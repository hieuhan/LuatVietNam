//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UploadFileClient.ServiceUpload
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ServiceUpload.IFileUploadService")]
    public interface IFileUploadService
    {

        // CODEGEN: Generating message contract since the wrapper name (UploadRequest) of message UploadRequest does not match the default value (Upload)
        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IFileUploadService/Upload", ReplyAction = "http://tempuri.org/IFileUploadService/UploadResponse")]
        UploadFileClient.ServiceUpload.UploadResponse Upload(UploadFileClient.ServiceUpload.UploadRequest request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "UploadRequest", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class UploadRequest
    {

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://tempuri.org/")]
        public string FileName;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://tempuri.org/")]
        public string FileType;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://tempuri.org/")]
        public string Password;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://tempuri.org/")]
        public string SubFolder;

        [System.ServiceModel.MessageHeaderAttribute(Namespace = "http://tempuri.org/")]
        public string Username;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public System.IO.Stream Stream;

        public UploadRequest()
        {
        }

        public UploadRequest(string FileName, string FileType, string Password, string SubFolder, string Username, System.IO.Stream Stream)
        {
            this.FileName = FileName;
            this.FileType = FileType;
            this.Password = Password;
            this.SubFolder = SubFolder;
            this.Username = Username;
            this.Stream = Stream;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName = "UploadResponse", WrapperNamespace = "http://tempuri.org/", IsWrapped = true)]
    public partial class UploadResponse
    {

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 0)]
        public bool UploadSucceeded;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "http://tempuri.org/", Order = 1)]
        public string Message;

        public UploadResponse()
        {
        }

        public UploadResponse(bool UploadSucceeded, string Message)
        {
            this.UploadSucceeded = UploadSucceeded;
            this.Message = Message;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploadServiceChannel : UploadFileClient.ServiceUpload.IFileUploadService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadServiceClient : System.ServiceModel.ClientBase<UploadFileClient.ServiceUpload.IFileUploadService>, UploadFileClient.ServiceUpload.IFileUploadService
    {

        public FileUploadServiceClient()
        {
        }

        public FileUploadServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public FileUploadServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public FileUploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public FileUploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UploadFileClient.ServiceUpload.UploadResponse UploadFileClient.ServiceUpload.IFileUploadService.Upload(UploadFileClient.ServiceUpload.UploadRequest request)
        {
            return base.Channel.Upload(request);
        }

        public bool Upload(string Username, string Password, string FileName, string FileType, string SubFolder, System.IO.Stream Stream, out string Message)
        {
            UploadFileClient.ServiceUpload.UploadRequest inValue = new UploadFileClient.ServiceUpload.UploadRequest();
            inValue.FileName = FileName;
            inValue.FileType = FileType;
            inValue.Password = Password;
            inValue.SubFolder = SubFolder;
            inValue.Username = Username;
            inValue.Stream = Stream;
            UploadFileClient.ServiceUpload.UploadResponse retVal = ((UploadFileClient.ServiceUpload.IFileUploadService)(this)).Upload(inValue);
            Message = retVal.Message;
            return retVal.UploadSucceeded;
        }
    }
}
